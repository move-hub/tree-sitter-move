====
expression
====

|a,b| a+b;
loop {};
return;
return 1;
abort 1;
a = 1 + a;

// binary expression
quotient != 0 || numerator == 0;
(numerator as u128) << 64;

// unary expression
!a;
&a;
&mut a;
move a;
copy a;
a;

---
(source_file
  (lambda_expression
    bindings: (lambda_bindings
      (bind_var
        (variable_identifier))
      (bind_var
        (variable_identifier)))
    exp: (binary_expression
      lhs: (name_expression
        access: (module_access
          member: (identifier)))
      operator: (binary_operator)
      rhs: (name_expression
        access: (module_access
          member: (identifier)))))
  (loop_expression
    body: (block))
  (return_expression)
  (return_expression
    return: (num_literal))
  (abort_expression
    abort: (num_literal))
  (assign_expression
    lhs: (name_expression
      access: (module_access
        member: (identifier)))
    rhs: (binary_expression
      lhs: (num_literal)
      operator: (binary_operator)
      rhs: (name_expression
        access: (module_access
          member: (identifier)))))
  (line_comment)
  (binary_expression
    lhs: (binary_expression
      lhs: (name_expression
        access: (module_access
          member: (identifier)))
      operator: (binary_operator)
      rhs: (num_literal))
    operator: (binary_operator)
    rhs: (binary_expression
      lhs: (name_expression
        access: (module_access
          member: (identifier)))
      operator: (binary_operator)
      rhs: (num_literal)))
  (binary_expression
    lhs: (cast_expression
      exp: (name_expression
        access: (module_access
          member: (identifier)))
      ty: (apply_type
        (module_access
          member: (identifier))))
    operator: (binary_operator)
    rhs: (num_literal))
  (line_comment)
  (unary_expression
    op: (unary_op)
    exp: (name_expression
      access: (module_access
        member: (identifier))))
  (borrow_expression
    exp: (name_expression
      access: (module_access
        member: (identifier))))
  (borrow_expression
    exp: (name_expression
      access: (module_access
        member: (identifier))))
  (move_or_copy_expression
    exp: (variable_identifier))
  (move_or_copy_expression
    exp: (variable_identifier))
  (name_expression
    access: (module_access
      member: (identifier))))